<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <generator uri="http://jekyllrb.com" version="3.8.6">Jekyll</generator>
  
  
  <link href="https://dotkay.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://dotkay.github.io/" rel="alternate" type="text/html" hreflang="en" />
  <updated>2020-06-17T23:56:33+00:00</updated>
  <id>https://dotkay.github.io//</id>

  
    <title type="html">Quotidien</title>
  

  
    <subtitle>Learning by teaching</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">Covid vs Coal →</title>
      
      <link href="https://dotkay.github.io/2020/06/01/covid-vs-coal/" rel="alternate" type="text/html" title="Covid vs Coal" />
      <published>2020-06-01T00:00:00+00:00</published>
      <updated>2020-06-01T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2020/06/01/covid-vs-coal</id>
      <content type="html" xml:base="https://dotkay.github.io/2020/06/01/covid-vs-coal/">&lt;p&gt;I was listening to an interesting news program on renewable energy recently that made claims and projections about the current state and future of energy - primarily about renewable energy overtaking coal as the major source of energy. As a result of Covid, demand for electricity has fallen and as coal has become more and more expensive than renewable counterparts, coal based electricity is facing an uphill battle. Will coal survive the covid crisis, in developed countries, is yet to be seen.&lt;/p&gt;

&lt;p&gt;This prompted me to dig further into the data on energy production and consumption in the US. I was indeed surprised to see that coal based energy production is in fact decreasing in the US, and is decreasing drastically. I was surpised by two factors. First, I thought only under-developed or developing countries were the places where coal based energy was a major source, primarily due to the lack of infrastructure (like efficient transmission grids) and the cost of renewable energy (solar panels, wind turbines, etc.). Second, nuclear power production has flattened out somewhere in the last decade, and is now overtaken by renewable energy. With several nuclear power plants built over the decades, some of them dangerously &lt;a href=&quot;http://www.nbcnews.com/id/42103936/ns/world_news-asia_pacific/t/what-are-odds-us-nuke-plants-ranked-quake-risk/&quot;&gt;close to fault lines&lt;/a&gt;, I was expecting more energy to be generated by nuclear plants. It turned out that was not the case.&lt;/p&gt;

&lt;p&gt;Looking at the data, coal production is indeed decreasing and at such a rate that it is almost close to what it was in the 1950s. While renewable energy is all set to overtake coal based energy and experts predict 2020 to be the year for this to happen. In fact, renewable energy production has already overtaken nuclear energy.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/energy/coal_vs_renewable.PNG&quot; alt=&quot;Coal vs Renewable Energy&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;While the above is certainly positive news, there are several other fossil fuels (natural gas, crude oil, etc.) just like there are several renewable energy sources (hydroelectric,  solar, wind, etc.). Looking at more details at the different sources of fossil fuels, although coal production has reduced, total fossil fuel production is still way more than renewable energy production as the following chart shows.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/energy/fossil_vs_renewable.PNG&quot; alt=&quot;Fossil Fuels vs Renewable Energy&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Stay tuned for more insights into energy production and consumption in residential and transportation sectors.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="energy" />
      
        <category term="coal" />
      
        <category term="renewable energy" />
      
        <category term="US" />
      

      

      
        <summary type="html">I was listening to an interesting news program on renewable energy recently that made claims and projections about the current state and future of energy - primarily about renewable energy overtaking coal as the major source of energy. As a result of Covid, demand for electricity has fallen and as coal has become more and more expensive than renewable counterparts, coal based electricity is facing an uphill battle. Will coal survive the covid crisis, in developed countries, is yet to be seen. This prompted me to dig further into the data on energy production and consumption in the US. I was indeed surprised to see that coal based energy production is in fact decreasing in the US, and is decreasing drastically. I was surpised by two factors. First, I thought only under-developed or developing countries were the places where coal based energy was a major source, primarily due to the lack of infrastructure (like efficient transmission grids) and the cost of renewable energy (solar panels, wind turbines, etc.). Second, nuclear power production has flattened out somewhere in the last decade, and is now overtaken by renewable energy. With several nuclear power plants built over the decades, some of them dangerously close to fault lines, I was expecting more energy to be generated by nuclear plants. It turned out that was not the case. Looking at the data, coal production is indeed decreasing and at such a rate that it is almost close to what it was in the 1950s. While renewable energy is all set to overtake coal based energy and experts predict 2020 to be the year for this to happen. In fact, renewable energy production has already overtaken nuclear energy. While the above is certainly positive news, there are several other fossil fuels (natural gas, crude oil, etc.) just like there are several renewable energy sources (hydroelectric, solar, wind, etc.). Looking at more details at the different sources of fossil fuels, although coal production has reduced, total fossil fuel production is still way more than renewable energy production as the following chart shows. Stay tuned for more insights into energy production and consumption in residential and transportation sectors.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">LinkedIn’s Business →</title>
      
      <link href="https://dotkay.github.io/2019/12/01/linkedin-business/" rel="alternate" type="text/html" title="LinkedIn's Business" />
      <published>2019-12-01T00:00:00+00:00</published>
      <updated>2019-12-01T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2019/12/01/linkedin-business</id>
      <content type="html" xml:base="https://dotkay.github.io/2019/12/01/linkedin-business/">&lt;p&gt;Lately, I have been reading about several businesses and trying to understand their product offerings, value proposition of the products, business model and how they came to be. With a natural inclination for technology products and a curiosity about startups and business models, this has been an enjoyable learning experience and I am hoping to share a lot of my learning through this medium. Let’s start with LinkedIn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkedIn’s Vision&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create economic opportunity for every member of the global workforce.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;dl&gt;
  &lt;dt&gt;I liked the simple and clear vision statement but was wondering why it mentions only &lt;em&gt;economic opportunity&lt;/em&gt; while LinkedIn’s products offer much more or could it be the case that all the benefits the products offer can be tied to economic opportunity? I started researching about what this term &lt;em&gt;economic opportunity&lt;/em&gt; entails and found &lt;a href=&quot;https://www.quora.com/How-are-economic-opportunities-defined&quot;&gt;this answer&lt;/a&gt; in Quora:&lt;/dt&gt;
  &lt;dt&gt;&lt;br /&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;&lt;em&gt;When somebody is willing to pay you money for doing something that you are willing and able to do, that is an “economic opportunity”. It can be a small business idea or a job.If you can produce a product or provide a service that people are willing to pay for, that is a small business opportunity. If you have an ability or skill that an employer needs, that is a job opportunity.&lt;/em&gt;&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dd&gt;
    &lt;p&gt;&lt;em&gt;Basically, an economic opportunity is the chance to do work that somebody is willing to pay you for. You don’t have to “like” the work. You just have to be able to competently do it. If you like your work, all the better for you. But we work to earn money that is paid by other people. The work we do is for other people’s benefit. The money they pay us is for our benefit. It is a reciprocal pay-earn, demand-supply economic relationship. They pay us money for supplying them what they want.&lt;/em&gt;&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;I, however, feel that LinkedIn also provides knowledge opportunity (learning), business/marketing opportunity (sales leads) and career opportunity (jobs for professionals) and talent development (hiring solutions for recruiters) opportunity, etc. There might be some or some aspects of these on which you cannot really put a dollar value on in order for them to be called an &lt;em&gt;economic opportunity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkedIn’s Mission&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The mission of LinkedIn is simple: connect the world’s professionals to make them more productive and successful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, a short and crisp mission statement. But, again I believe that the main benefit is making professionals more skilled, equipped, informed, etc., rather than just productive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkedIn’s Products&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn to many is just a networking site for professionals. But once you look at the suite of products it is much more than that. LinkedIn’s products are organized under four themes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hire&lt;/li&gt;
  &lt;li&gt;Market&lt;/li&gt;
  &lt;li&gt;Sell&lt;/li&gt;
  &lt;li&gt;Learn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The various products under each of these themes are shown below:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/products/linkedin_products.jpg&quot; alt=&quot;LinkedIn's Products&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is difficult to categorize each of the products into &lt;em&gt;advertisement-based&lt;/em&gt; or &lt;em&gt;subscription-based&lt;/em&gt; one as some of them overlap both business models. The &lt;em&gt;HIRE&lt;/em&gt; theme is mainly for human resources professionals to track, follow, and manage recruiting pipeline for their organizations. I believe this could be one of the most active products (along with learning) on the platform. The &lt;em&gt;MARKET&lt;/em&gt; theme helps in setting up marketing campaigns, reach out to potential resources for marketing purposes, set up custom pages, and serve advertisements on the pages and possibly through emails. Although it sounds like a lot of features, I believe they would have a very stiff competition from the likes of Google and Facebook. Although the advertisements would be more relevant to hiring and professional marketing, the eyeballs on these wouldn’t be as much as on Google search and Facebook feeds. However, with the volume of professionals in the network, hiring ads would get the best reach on this platform. The &lt;em&gt;SELL&lt;/em&gt; theme sounds like a specialized Salesforce platform.  The &lt;em&gt;LEARN&lt;/em&gt; theme is an upcoming Coursera. Although it may not offer a wide variety of specializations for now, with data from the &lt;em&gt;HIRE&lt;/em&gt; theme, it would be a more powerful medium for specialized skill development targeted at specific job roles in specific industries. We need to wait and watch how well Microsoft uses the data from one to better the offerings of another. Although LinkedIn membership is free, there is also a premium subscription which could be considered as a separate product in itself (creating significant revenue) and it is needed to use several of the other products, for example InMail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkedIn’s business&lt;/strong&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;LinkedIn has become a significant business unit of Microsoft. According to a &lt;a href=&quot;https://www.businessofapps.com/data/linkedin-statistics/&quot;&gt;source&lt;/a&gt;&lt;/dt&gt;
  &lt;dt&gt;&lt;br /&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;&lt;em&gt;In the 2019 fiscal year, LinkedIn brought in $6.8 billion worth of revenue, contributing to $38.1 billion of commercial cloud revenue for Microsoft, which in turn made up part of $126 billion total revenue.&lt;/em&gt;&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Further the numbers below from Microsoft’s earnings and LinkedIn newsroom validate the importance of LinkedIn and its potential.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/products/linkedin_fy20_q1.PNG&quot; alt=&quot;LinkedIn FY20 Q1&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/products/linkedin_stats.PNG&quot; alt=&quot;LinkedIn impact&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LinkedIn’s Opportunity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/products/linkedin_worldwide.png&quot; alt=&quot;LinkedIn Stats&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that shows the opportunity for LinkedIn. Along with the above, GitHub - the world’s largest software development platform or the playground for developers was snapped up by Microsoft. This indicates a very huge potential. The data from &lt;em&gt;HIRE&lt;/em&gt; theme above combined with &lt;em&gt;LEARN&lt;/em&gt; theme and fueled by GitHub platform is a wonderful growth opportunity. GitHub + LinkedIn for developers would be Instagram for fashionistas and for businesses and recruiters this would be the Instagram for fashion brands seeking ambassadors and influencers. Probably some day very soon let me write about the opportunity for data science and AI in stitching all the above products together as one awesome fabric.&lt;/p&gt;

&lt;p&gt;Thats all for now!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="technology" />
      
        <category term="products" />
      
        <category term="business" />
      
        <category term="LinkedIn" />
      

      

      
        <summary type="html">Lately, I have been reading about several businesses and trying to understand their product offerings, value proposition of the products, business model and how they came to be. With a natural inclination for technology products and a curiosity about startups and business models, this has been an enjoyable learning experience and I am hoping to share a lot of my learning through this medium. Let’s start with LinkedIn. LinkedIn’s Vision Create economic opportunity for every member of the global workforce. I liked the simple and clear vision statement but was wondering why it mentions only economic opportunity while LinkedIn’s products offer much more or could it be the case that all the benefits the products offer can be tied to economic opportunity? I started researching about what this term economic opportunity entails and found this answer in Quora: When somebody is willing to pay you money for doing something that you are willing and able to do, that is an “economic opportunity”. It can be a small business idea or a job.If you can produce a product or provide a service that people are willing to pay for, that is a small business opportunity. If you have an ability or skill that an employer needs, that is a job opportunity. Basically, an economic opportunity is the chance to do work that somebody is willing to pay you for. You don’t have to “like” the work. You just have to be able to competently do it. If you like your work, all the better for you. But we work to earn money that is paid by other people. The work we do is for other people’s benefit. The money they pay us is for our benefit. It is a reciprocal pay-earn, demand-supply economic relationship. They pay us money for supplying them what they want. I, however, feel that LinkedIn also provides knowledge opportunity (learning), business/marketing opportunity (sales leads) and career opportunity (jobs for professionals) and talent development (hiring solutions for recruiters) opportunity, etc. There might be some or some aspects of these on which you cannot really put a dollar value on in order for them to be called an economic opportunity. LinkedIn’s Mission The mission of LinkedIn is simple: connect the world’s professionals to make them more productive and successful. Again, a short and crisp mission statement. But, again I believe that the main benefit is making professionals more skilled, equipped, informed, etc., rather than just productive. LinkedIn’s Products LinkedIn to many is just a networking site for professionals. But once you look at the suite of products it is much more than that. LinkedIn’s products are organized under four themes: Hire Market Sell Learn The various products under each of these themes are shown below: It is difficult to categorize each of the products into advertisement-based or subscription-based one as some of them overlap both business models. The HIRE theme is mainly for human resources professionals to track, follow, and manage recruiting pipeline for their organizations. I believe this could be one of the most active products (along with learning) on the platform. The MARKET theme helps in setting up marketing campaigns, reach out to potential resources for marketing purposes, set up custom pages, and serve advertisements on the pages and possibly through emails. Although it sounds like a lot of features, I believe they would have a very stiff competition from the likes of Google and Facebook. Although the advertisements would be more relevant to hiring and professional marketing, the eyeballs on these wouldn’t be as much as on Google search and Facebook feeds. However, with the volume of professionals in the network, hiring ads would get the best reach on this platform. The SELL theme sounds like a specialized Salesforce platform. The LEARN theme is an upcoming Coursera. Although it may not offer a wide variety of specializations for now, with data from the HIRE theme, it would be a more powerful medium for specialized skill development targeted at specific job roles in specific industries. We need to wait and watch how well Microsoft uses the data from one to better the offerings of another. Although LinkedIn membership is free, there is also a premium subscription which could be considered as a separate product in itself (creating significant revenue) and it is needed to use several of the other products, for example InMail. LinkedIn’s business LinkedIn has become a significant business unit of Microsoft. According to a source In the 2019 fiscal year, LinkedIn brought in $6.8 billion worth of revenue, contributing to $38.1 billion of commercial cloud revenue for Microsoft, which in turn made up part of $126 billion total revenue. Further the numbers below from Microsoft’s earnings and LinkedIn newsroom validate the importance of LinkedIn and its potential. LinkedIn’s Opportunity And that shows the opportunity for LinkedIn. Along with the above, GitHub - the world’s largest software development platform or the playground for developers was snapped up by Microsoft. This indicates a very huge potential. The data from HIRE theme above combined with LEARN theme and fueled by GitHub platform is a wonderful growth opportunity. GitHub + LinkedIn for developers would be Instagram for fashionistas and for businesses and recruiters this would be the Instagram for fashion brands seeking ambassadors and influencers. Probably some day very soon let me write about the opportunity for data science and AI in stitching all the above products together as one awesome fabric. Thats all for now!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Magic Money Tree →</title>
      
      <link href="https://dotkay.github.io/2019/07/01/mmt/" rel="alternate" type="text/html" title="The Magic Money Tree" />
      <published>2019-07-01T00:00:00+00:00</published>
      <updated>2019-07-01T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2019/07/01/mmt</id>
      <content type="html" xml:base="https://dotkay.github.io/2019/07/01/mmt/">&lt;p&gt;As people who know me understand, I read articles and listen to podcasts on a variety of topics ranging from technology, social science, society, economics, etc. Economics is one of my favourites, as it is very relatable to our day to day lives, besides involving mathematical modelling (which, for the same reasons as Deep Learning techniques of today, can only be close to a very good approximation but never accurate). While listening to BBC’s Business Daily podcasts, I stumbled upon this episode on Modern Monetary Theory. The title of the podcast - “Magic Money Tree” caught my attention and it turned out to be an interesting take on a proposal by one of the former Hedge Fund manager about central banks being able to print more money when needed. I did have this idea when I was a kid before I realized inflation and value of goods and how they are tied to abundance of ciculation of money, interest rates and consumer spending. I am not an economist but I am worried how this could lead to powerful economies manipulating their inflation thereby leading to disastrous consequences in parts of the world whose currencies are not global trade currencies.&lt;/p&gt;

&lt;p&gt;For those interested in listening to the episode, you can do it here:&lt;/p&gt;
&lt;audio controls=&quot;&quot;&gt;
&lt;source src=&quot;http://open.live.bbc.co.uk/mediaselector/6/redir/version/2.0/mediaset/audio-nondrm-download-low/proto/http/vpid/p079cpnd.mp3&quot; /&gt; 
&lt;/audio&gt;

&lt;p&gt;Are there wonderful teachers among expert economists who can
help me understand?&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="Money" />
      
        <category term="Monetary Policy" />
      

      

      
        <summary type="html">As people who know me understand, I read articles and listen to podcasts on a variety of topics ranging from technology, social science, society, economics, etc. Economics is one of my favourites, as it is very relatable to our day to day lives, besides involving mathematical modelling (which, for the same reasons as Deep Learning techniques of today, can only be close to a very good approximation but never accurate). While listening to BBC’s Business Daily podcasts, I stumbled upon this episode on Modern Monetary Theory. The title of the podcast - “Magic Money Tree” caught my attention and it turned out to be an interesting take on a proposal by one of the former Hedge Fund manager about central banks being able to print more money when needed. I did have this idea when I was a kid before I realized inflation and value of goods and how they are tied to abundance of ciculation of money, interest rates and consumer spending. I am not an economist but I am worried how this could lead to powerful economies manipulating their inflation thereby leading to disastrous consequences in parts of the world whose currencies are not global trade currencies. For those interested in listening to the episode, you can do it here: Are there wonderful teachers among expert economists who can help me understand?</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">The Edge Effect →</title>
      
      <link href="https://dotkay.github.io/2019/01/06/edge-effect/" rel="alternate" type="text/html" title="The Edge Effect" />
      <published>2019-01-06T00:00:00+00:00</published>
      <updated>2019-01-06T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2019/01/06/edge-effect</id>
      <content type="html" xml:base="https://dotkay.github.io/2019/01/06/edge-effect/">&lt;p&gt;On this rainy Sunday in California, with not much motivation to do anything serious, with the last of the India-Australia Test series underway in Sydney delayed due to rain, I started scrolling through the library of my favourite pod-casts and this particular one caught my attention. &lt;em&gt;The Edge Effect&lt;/em&gt; - an episode from NPR’s &lt;a href=&quot;https://www.npr.org/series/423302056/hidden-brain&quot;&gt;Hidden Brain&lt;/a&gt; series.&lt;/p&gt;

&lt;p&gt;The episode talks about the importance of encouraging and developing diversity of thoughts and ideas. It draws examples from science and music and makes compelling arguments supporting diversity. In particular, the experiments by Adam Galinsky and the life story of Cristina Pato were very impressive.&lt;/p&gt;

&lt;p&gt;For those interested, here is a link to the podcast:&lt;/p&gt;

&lt;audio controls=&quot;&quot;&gt;
&lt;source src=&quot;https://play.podtrac.com/npr-510308/npr.mc.tritondigital.com/NPR_510308/media/anon.npr-podcasts/podcast/npr/hiddenbrain/2018/07/20180702_hiddenbrain_hb_diversity_and_creativity__-_final_pod_mix-9012e926-5cd6-4e44-b9d5-0b6e9750801c.mp3&quot; /&gt; 
&lt;/audio&gt;

&lt;p&gt;I should take time to appreciate the diversity my parents exposed me to, while growing up in India.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="Diversity" />
      
        <category term="Edge Effect" />
      
        <category term="NPR" />
      
        <category term="Hidden Brain" />
      

      

      
        <summary type="html">On this rainy Sunday in California, with not much motivation to do anything serious, with the last of the India-Australia Test series underway in Sydney delayed due to rain, I started scrolling through the library of my favourite pod-casts and this particular one caught my attention. The Edge Effect - an episode from NPR’s Hidden Brain series. The episode talks about the importance of encouraging and developing diversity of thoughts and ideas. It draws examples from science and music and makes compelling arguments supporting diversity. In particular, the experiments by Adam Galinsky and the life story of Cristina Pato were very impressive. For those interested, here is a link to the podcast: I should take time to appreciate the diversity my parents exposed me to, while growing up in India.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Personalized movies … any takers? →</title>
      
      <link href="https://dotkay.github.io/2019/01/02/personalized-movies/" rel="alternate" type="text/html" title="Personalized movies ... any takers?" />
      <published>2019-01-02T00:00:00+00:00</published>
      <updated>2019-01-02T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2019/01/02/personalized-movies</id>
      <content type="html" xml:base="https://dotkay.github.io/2019/01/02/personalized-movies/">&lt;div class=&quot;img_container&quot;&gt;
  &lt;p class=&quot;img=responsive&quot;&gt;&lt;img src=&quot;/assets/images/misc/deewaar2.png&quot; alt=&quot;Amar Akbar Anthony&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I got into this discussion over lunch when I heard about the Netflix series “Black Mirror” which allows the audience to choose among a set of possible story endings. This is an excellent development, in my view, in that it not only brings more suspense and interest or attention to the content, on the lighter side it would also prevent spoilers.&lt;/p&gt;

&lt;p&gt;Ever since I heard about &lt;a href=&quot;https://newsable.asianetnews.com/kerala/after-solo-other-malayalam-films-supposed-to-have-different-endings&quot;&gt;south Indian movies that had different climaxes&lt;/a&gt; (although to appease the fan base in different regions), I have always wondered why not have multiple possibilities for a movie climax and serve (stream) the appropriate one depending on the goal of the movie audience - i.e., if the goal is to just watch the movie and return home happy, one could have a happy ending, if the viewer is adventurous or an FPS gamer, one could have a violent or tragic ending, etc.&lt;/p&gt;

&lt;p&gt;Now that we have personalization using big data analytics everywhere, it should be possible for a streaming service to identify the likes and dislikes of the audience based on previous perferences, reviews, age, likes, and the many similar features to identify the best climax for each specific viewer, besides providing the viewer the choice to choose from alternate climaxes. Of course, the cost is in the making of several different versions of a movie or TV series which in a way could be reduced using today’s CGI that only gets better over time. The upshot would be more viewership and more discussion centered around the various climaxes. Instead of viewers just watching the movie and rating them, each different climax of the same movie would get rated by different personalities. Such a service could also stream a movie ending in such a way as to cheer you up when you are dull or to pump you up when you are demotivated. Movies will never be the same again!&lt;/p&gt;

&lt;p&gt;If such a personalization of streaming content were to happen who would lead the way? Would it be Amazon Fire TV who has the machine learning backend to make personalization happen, NetFlix who has the influence to get the producers to make several interesting versions of a movie or TV series or Apple TV service if Apple were to get its innovation crown back? What do you think?&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="technology" />
      
        <category term="streaming content" />
      
        <category term="personalization" />
      

      

      
        <summary type="html">I got into this discussion over lunch when I heard about the Netflix series “Black Mirror” which allows the audience to choose among a set of possible story endings. This is an excellent development, in my view, in that it not only brings more suspense and interest or attention to the content, on the lighter side it would also prevent spoilers. Ever since I heard about south Indian movies that had different climaxes (although to appease the fan base in different regions), I have always wondered why not have multiple possibilities for a movie climax and serve (stream) the appropriate one depending on the goal of the movie audience - i.e., if the goal is to just watch the movie and return home happy, one could have a happy ending, if the viewer is adventurous or an FPS gamer, one could have a violent or tragic ending, etc. Now that we have personalization using big data analytics everywhere, it should be possible for a streaming service to identify the likes and dislikes of the audience based on previous perferences, reviews, age, likes, and the many similar features to identify the best climax for each specific viewer, besides providing the viewer the choice to choose from alternate climaxes. Of course, the cost is in the making of several different versions of a movie or TV series which in a way could be reduced using today’s CGI that only gets better over time. The upshot would be more viewership and more discussion centered around the various climaxes. Instead of viewers just watching the movie and rating them, each different climax of the same movie would get rated by different personalities. Such a service could also stream a movie ending in such a way as to cheer you up when you are dull or to pump you up when you are demotivated. Movies will never be the same again! If such a personalization of streaming content were to happen who would lead the way? Would it be Amazon Fire TV who has the machine learning backend to make personalization happen, NetFlix who has the influence to get the producers to make several interesting versions of a movie or TV series or Apple TV service if Apple were to get its innovation crown back? What do you think?</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">New year, Privacy and Security →</title>
      
      <link href="https://dotkay.github.io/2019/01/01/privacy-and-security/" rel="alternate" type="text/html" title="New year, Privacy and Security" />
      <published>2019-01-01T00:00:00+00:00</published>
      <updated>2019-01-01T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2019/01/01/privacy-and-security</id>
      <content type="html" xml:base="https://dotkay.github.io/2019/01/01/privacy-and-security/">&lt;p&gt;Happy New year friends!&lt;/p&gt;

&lt;p&gt;What a year 2018 has been for the topic of privacy and security - from the most loved &lt;a href=&quot;https://www.nytimes.com/2018/03/19/technology/facebook-cambridge-analytica-explained.html&quot;&gt;social network&lt;/a&gt; scrambling for clues to save themselves to the other &lt;a href=&quot;https://www.theguardian.com/technology/2018/dec/10/google-to-shut-down-early-after-privacy-flaw-affects-over-50m-users&quot;&gt;social network&lt;/a&gt; built by the world’s best engineers still couldn’t save their data, besides struggling to stay relevant. While Europe was quick to pass &lt;a href=&quot;https://eugdpr.org/&quot;&gt;GDPR&lt;/a&gt;, many other countries even in the developed world are yet to catch up with such laws and regulations. 2018 was also the year that saw the &lt;a href=&quot;https://techcrunch.com/2018/12/28/smart-speakers-hit-critical-mass-in-2018/&quot;&gt;surge in smart speakers&lt;/a&gt; and home automation - isn’t that ironic?&lt;/p&gt;

&lt;p&gt;But this story is not about the past, but about the future. Many top technology and auto companies rushing to fulfill the promise of self-driving or autonomous vehicles. It will definitely become a reality, to some extent, in at least the parts of the world where the infrastructure supports it. But the notion of foolproof security for such a technology is far from being achieved. With smartphone apps like Facebook, WhatsApp and Google+ security issues, we have only scratched the surface of the malevolent intent that is possible. Once autonomous vehicles and other IoT devices reach critical mass, the security issues are only going to multiply manifold and the impact of security flaws can have disastrous consequences. Imagine a malicious attacker taking control of traffic lights that talk to cars or cars talking to other cars to negotiate who gets to cross an intersection, or a mass rapid transit system that reroutes itself or changes frequency of rides depending on real-time ridership information using neural network based predictions. Imagine the impact of such a thing gone wrong. With the current day deep learning algorithms themselves not being tractable (i.e. one can not reliably track the computation from input data to the prediction step by step as in &lt;a href=&quot;https://skymind.ai/wiki/symbolic-reasoning&quot;&gt;symbolic AI&lt;/a&gt;) it is going to be more challenging to resolve a security issue even after having identified it. Apologies for being pessimistic - but one should see this as a challenge for computer architecture and computer security research - a great time to be working in any of these fields.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want a job for the next one year, learn web/mobile app development, if you need a job for the next five years, train yourself with deep learning skills, if you need a job for the rest of your life, start working on computer security.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An interesting short documentary I happened to watch recently:&lt;/p&gt;

&lt;div class=&quot;img_container&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KGX-c5BJNFk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      

      
        <category term="technology" />
      
        <category term="privacy" />
      
        <category term="security" />
      

      

      
        <summary type="html">Happy New year friends! What a year 2018 has been for the topic of privacy and security - from the most loved social network scrambling for clues to save themselves to the other social network built by the world’s best engineers still couldn’t save their data, besides struggling to stay relevant. While Europe was quick to pass GDPR, many other countries even in the developed world are yet to catch up with such laws and regulations. 2018 was also the year that saw the surge in smart speakers and home automation - isn’t that ironic? But this story is not about the past, but about the future. Many top technology and auto companies rushing to fulfill the promise of self-driving or autonomous vehicles. It will definitely become a reality, to some extent, in at least the parts of the world where the infrastructure supports it. But the notion of foolproof security for such a technology is far from being achieved. With smartphone apps like Facebook, WhatsApp and Google+ security issues, we have only scratched the surface of the malevolent intent that is possible. Once autonomous vehicles and other IoT devices reach critical mass, the security issues are only going to multiply manifold and the impact of security flaws can have disastrous consequences. Imagine a malicious attacker taking control of traffic lights that talk to cars or cars talking to other cars to negotiate who gets to cross an intersection, or a mass rapid transit system that reroutes itself or changes frequency of rides depending on real-time ridership information using neural network based predictions. Imagine the impact of such a thing gone wrong. With the current day deep learning algorithms themselves not being tractable (i.e. one can not reliably track the computation from input data to the prediction step by step as in symbolic AI) it is going to be more challenging to resolve a security issue even after having identified it. Apologies for being pessimistic - but one should see this as a challenge for computer architecture and computer security research - a great time to be working in any of these fields. If you want a job for the next one year, learn web/mobile app development, if you need a job for the next five years, train yourself with deep learning skills, if you need a job for the rest of your life, start working on computer security. An interesting short documentary I happened to watch recently:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Google’s product portfolio →</title>
      
      <link href="https://dotkay.github.io/2018/08/16/google-product-portfolio/" rel="alternate" type="text/html" title="Google's product portfolio" />
      <published>2018-08-16T00:00:00+00:00</published>
      <updated>2018-08-16T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/08/16/google-product-portfolio</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/08/16/google-product-portfolio/">&lt;p&gt;Keeping up with my modest goals from the &lt;a href=&quot;https://dotkay.github.io/2018/08/15/deep-learning-and-tech-products&quot;&gt;previous post&lt;/a&gt;, I started looking at Google’s product portfolio.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Why Google? - Why not?&lt;/li&gt;
  &lt;li&gt;Why their product portfolio? - there is such a rich variety catering to different customer segments.&lt;/li&gt;
  &lt;li&gt;Why for this topic (analysing how machine learning and/or deep learning will impact/improve the products)? - Because we already see the impact (like Google translate, maps, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s their product portfolio, right from their webpage:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/products/G_product_portfolio.png&quot; alt=&quot;Google Product Portfolio&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In future posts, we will pick products from this list and analyze.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="technology" />
      
        <category term="products" />
      
        <category term="Google" />
      

      

      
        <summary type="html">Keeping up with my modest goals from the previous post, I started looking at Google’s product portfolio. Why Google? - Why not? Why their product portfolio? - there is such a rich variety catering to different customer segments. Why for this topic (analysing how machine learning and/or deep learning will impact/improve the products)? - Because we already see the impact (like Google translate, maps, etc.) Here’s their product portfolio, right from their webpage: In future posts, we will pick products from this list and analyze.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Deep Learning and Technology Products →</title>
      
      <link href="https://dotkay.github.io/2018/08/15/deep-learning-and-tech-products/" rel="alternate" type="text/html" title="Deep Learning and Technology Products" />
      <published>2018-08-15T00:00:00+00:00</published>
      <updated>2018-08-15T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/08/15/deep-learning-and-tech-products</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/08/15/deep-learning-and-tech-products/">&lt;p&gt;I happened to complete an online course on Deep Learning and just starting to look at different products to see how machine learning or deep learning techniques could be used to make these products better. Since I understand technology products and their landscape better, I am likely to be biased in analysing more technology products than non-tech ones, although I am determined to study some non-tech industries, processes, products and services to see if (at all) and how deep learning could be used there - that is a bigger challenge and one that would stimulate our neurons more. Let’s see how I fare …&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="technology" />
      
        <category term="deep learning" />
      
        <category term="Google" />
      

      

      
        <summary type="html">I happened to complete an online course on Deep Learning and just starting to look at different products to see how machine learning or deep learning techniques could be used to make these products better. Since I understand technology products and their landscape better, I am likely to be biased in analysing more technology products than non-tech ones, although I am determined to study some non-tech industries, processes, products and services to see if (at all) and how deep learning could be used there - that is a bigger challenge and one that would stimulate our neurons more. Let’s see how I fare …</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Drones for fire fighting… →</title>
      
      <link href="https://dotkay.github.io/2018/08/11/drones-for-fire-fighting/" rel="alternate" type="text/html" title="Drones for fire fighting..." />
      <published>2018-08-11T00:00:00+00:00</published>
      <updated>2018-08-11T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/08/11/drones-for-fire-fighting</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/08/11/drones-for-fire-fighting/">&lt;p&gt;While driving back from a camping along with my friends and looking at the vast possibly burnt areas, we started thinking why even in the &lt;em&gt;so called&lt;/em&gt; hot bed of technology (Silicon Valley) we &lt;a href=&quot;https://www.mercurynews.com/2018/07/30/why-planes-cant-fight-shastas-deadly-carr-fire/&quot;&gt;hear&lt;/a&gt; that fire fighting aircrafts had visibility problems because of the dense smoke. Why can’t we use autonomous drone technology for fighting wild fires (given that we use unmanned drones for warfare). Something to think about seriously.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="technology" />
      
        <category term="autonomous transport" />
      

      

      
        <summary type="html">While driving back from a camping along with my friends and looking at the vast possibly burnt areas, we started thinking why even in the so called hot bed of technology (Silicon Valley) we hear that fire fighting aircrafts had visibility problems because of the dense smoke. Why can’t we use autonomous drone technology for fighting wild fires (given that we use unmanned drones for warfare). Something to think about seriously.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Languages, mind and our way of thinking… →</title>
      
      <link href="https://dotkay.github.io/2018/07/15/hidden-brain-languages-mind/" rel="alternate" type="text/html" title="Languages, mind and our way of thinking..." />
      <published>2018-07-15T00:00:00+00:00</published>
      <updated>2018-07-15T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/07/15/hidden-brain-languages-mind</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/07/15/hidden-brain-languages-mind/">&lt;p&gt;Allez les Bleus!!&lt;/p&gt;

&lt;p&gt;Just happened to listen to this week’s episode of one of the recent NPR podcast series titled &lt;a href=&quot;https://www.npr.org/series/423302056/hidden-brain&quot;&gt;Hidden Brain&lt;/a&gt; and it got me thinking a lot. I speak almost 5 languages (not fluently but to different degrees of expertise) and I am not sure how my mind thinks. One thing for sure though is that I happen to think in my mother tongue and my mind translates it in (almost) real-time while I communicate, be it talking or writing down my thoughts as I do while writing this blog post. If languages do influence our thinking and understanding and more importantly the biases we cultivate, what does it mean for language translators - do they also convey the biases that are inherently influenced by one’s language? Or as a technologist I am also inclined to think what would it mean for AI systems (say chat-bots) that are meant to facilitate communication? I now tend to believe that they have to be designed with the intricacies of languages and the influences, biases that it carries along encoded into the system in order for it to be more acceptable. Even if not as a chat-bot, it would be a great system to train people to work with people of different cultures so that we understand different cultures better and comfortably communicate taking into account their nuances.&lt;/p&gt;

&lt;p&gt;If you are interested in listening to it, here it is:&lt;/p&gt;
&lt;audio controls=&quot;&quot;&gt;
&lt;source src=&quot;https://play.podtrac.com/npr-510308/ondemand.npr.org/anon.npr-mp3/npr/hiddenbrain/2018/07/20180712_hiddenbrain_hb_rad_-_watch_your_mouth__-_final_full_for_web.mp3&quot; /&gt;
&lt;/audio&gt;</content>

      
      
      
      
      

      

      
        <category term="psychology" />
      
        <category term="languages" />
      
        <category term="NPR" />
      

      

      
        <summary type="html">Allez les Bleus!! Just happened to listen to this week’s episode of one of the recent NPR podcast series titled Hidden Brain and it got me thinking a lot. I speak almost 5 languages (not fluently but to different degrees of expertise) and I am not sure how my mind thinks. One thing for sure though is that I happen to think in my mother tongue and my mind translates it in (almost) real-time while I communicate, be it talking or writing down my thoughts as I do while writing this blog post. If languages do influence our thinking and understanding and more importantly the biases we cultivate, what does it mean for language translators - do they also convey the biases that are inherently influenced by one’s language? Or as a technologist I am also inclined to think what would it mean for AI systems (say chat-bots) that are meant to facilitate communication? I now tend to believe that they have to be designed with the intricacies of languages and the influences, biases that it carries along encoded into the system in order for it to be more acceptable. Even if not as a chat-bot, it would be a great system to train people to work with people of different cultures so that we understand different cultures better and comfortably communicate taking into account their nuances. If you are interested in listening to it, here it is:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Python, dictionaries, mutation and insertion order →</title>
      
      <link href="https://dotkay.github.io/2018/06/30/python-dict-order/" rel="alternate" type="text/html" title="Python, dictionaries, mutation and insertion order" />
      <published>2018-06-30T00:00:00+00:00</published>
      <updated>2018-06-30T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/06/30/python-dict-order</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/06/30/python-dict-order/">&lt;p&gt;In an &lt;a href=&quot;https://dotkay.github.io/2018/06/24/python-tuple-mem-mgmt/&quot;&gt;earlier post&lt;/a&gt;, we saw tuples, which are immutable data-types in Python, but in the case of a tuple of lists, we were able to modify the contents of the list. Now, we will see dictionary objects in Python and see if they behave as expected. Recall that dictionaries are mutable objects in Python.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by d1: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The memory referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;d1&lt;/code&gt; seems to be &lt;code class=&quot;highlighter-rouge&quot;&gt;0x28be6286ee8&lt;/code&gt;. Now, let us try to modify the contents of our dictionary. In particular, let us add a new key and a corresponding value.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'k3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by d1: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The memory referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;d1&lt;/code&gt; still seems to be &lt;code class=&quot;highlighter-rouge&quot;&gt;0x28be6286ee8&lt;/code&gt;. So, dictionaries seem to be well behaved. I like them.&lt;/p&gt;

&lt;p&gt;However, for people who are still stuck with an older version (Python &amp;lt;= 3.5) and moving to Python &amp;gt;= 3.6, there are some surprises with dictionaries. For example, let us try with Python 3.6 first:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'g'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;prints out:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if you notice, the keys are in order they were specified when &lt;code class=&quot;highlighter-rouge&quot;&gt;d2&lt;/code&gt; was created. With Python &amp;lt;= 3.5 however, this was the output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reason for the above surprise is just that in Python 3.6 dictionaries got an order-preserving implementation and it became a standard since Python 3.7.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="mutable" />
      
        <category term="dict" />
      
        <category term="memory management" />
      
        <category term="insertion order" />
      
        <category term="Python" />
      

      

      
        <summary type="html">In an earlier post, we saw tuples, which are immutable data-types in Python, but in the case of a tuple of lists, we were able to modify the contents of the list. Now, we will see dictionary objects in Python and see if they behave as expected. Recall that dictionaries are mutable objects in Python. def mem_addr(item): return hex(id(item)) d1 = dict(k1 = 1, k2 = 'a') print('memory referenced by d1: {0}'.format(mem_addr(d1))) The memory referenced by d1 seems to be 0x28be6286ee8. Now, let us try to modify the contents of our dictionary. In particular, let us add a new key and a corresponding value. d1['k3'] = 10.5 print('memory referenced by d1: {0}'.format(mem_addr(d1))) The memory referenced by d1 still seems to be 0x28be6286ee8. So, dictionaries seem to be well behaved. I like them. However, for people who are still stuck with an older version (Python &amp;lt;= 3.5) and moving to Python &amp;gt;= 3.6, there are some surprises with dictionaries. For example, let us try with Python 3.6 first: d2 = { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9 } print(d2) prints out: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} And if you notice, the keys are in order they were specified when d2 was created. With Python &amp;lt;= 3.5 however, this was the output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} The reason for the above surprise is just that in Python 3.6 dictionaries got an order-preserving implementation and it became a standard since Python 3.7.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Python, immutable objects and memory management, again →</title>
      
      <link href="https://dotkay.github.io/2018/06/24/python-tuple-mem-mgmt/" rel="alternate" type="text/html" title="Python, immutable objects and memory management, again" />
      <published>2018-06-24T00:00:00+00:00</published>
      <updated>2018-06-24T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/06/24/python-tuple-mem-mgmt</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/06/24/python-tuple-mem-mgmt/">&lt;p&gt;In an &lt;a href=&quot;https://dotkay.github.io/2018/06/18/python-tuple-mem-mgmt/&quot;&gt;earlier post&lt;/a&gt;, we saw how immutable objects like tuples are handled by Python’s memory management. It was straight-forward - tuples are immutable and so, when we try to update the tuple object, Python creates a new reference. Or does it? Always?&lt;/p&gt;

&lt;p&gt;Let us consider the following tuple, this time a &lt;em&gt;tuple of lists&lt;/em&gt;. Recall that lists in Python are mutable objects.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by t: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And our output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;([1, 2], [4, 5])
memory referenced by t: 0x2103c874a48
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We see that the memory referenced by the object &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; which in our case is a tuple is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2103c874a48&lt;/code&gt;. And we know that tuples are immutable objects in Python. So, let’s try to change the above tuple object &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;. This time we are going to do that by updating the individual elements &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; that constitute our tuple object.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by t: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we get the following printed:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;([1, 2, 3], [4, 5, 6])
memory referenced by t: 0x2103c874a48
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/py/tup_mem_mgmt_2.png&quot; alt=&quot;Python Memory Management&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;And what just happened here? Our immutable object &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; got updated without a new reference being created. So, it is not just the object itself that matters, the type of the constituent objects also plays a role in memory management. Hope this is enough motivation to play around with different mutable and immutable objects and how Python’s memory management handles them.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="immutable" />
      
        <category term="tuples" />
      
        <category term="memory management" />
      
        <category term="Python" />
      

      

      
        <summary type="html">In an earlier post, we saw how immutable objects like tuples are handled by Python’s memory management. It was straight-forward - tuples are immutable and so, when we try to update the tuple object, Python creates a new reference. Or does it? Always? Let us consider the following tuple, this time a tuple of lists. Recall that lists in Python are mutable objects. def mem_addr(item): return hex(id(item)) a = [1, 2] b = [4, 5] t = (a, b) print(t) print('memory referenced by t: {0}'.format(mem_addr(t))) And our output: ([1, 2], [4, 5]) memory referenced by t: 0x2103c874a48 We see that the memory referenced by the object t which in our case is a tuple is 0x2103c874a48. And we know that tuples are immutable objects in Python. So, let’s try to change the above tuple object t. This time we are going to do that by updating the individual elements a and b that constitute our tuple object. a.append(3) b.append(6) print(t) print('memory referenced by t: {0}'.format(mem_addr(t))) And we get the following printed: ([1, 2, 3], [4, 5, 6]) memory referenced by t: 0x2103c874a48 And what just happened here? Our immutable object t got updated without a new reference being created. So, it is not just the object itself that matters, the type of the constituent objects also plays a role in memory management. Hope this is enough motivation to play around with different mutable and immutable objects and how Python’s memory management handles them.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Python, immutable data-types again, and memory management →</title>
      
      <link href="https://dotkay.github.io/2018/06/18/python-tuple-mem-mgmt/" rel="alternate" type="text/html" title="Python, immutable data-types again, and memory management" />
      <published>2018-06-18T00:00:00+00:00</published>
      <updated>2018-06-18T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/06/18/python-tuple-mem-mgmt</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/06/18/python-tuple-mem-mgmt/">&lt;p&gt;In an &lt;a href=&quot;https://dotkay.github.io/2018/06/01/python-var-mem-mgmt/&quot;&gt;earlier post&lt;/a&gt; we saw how Python’s memory management behaves when dealing with immutable objects. In this post, let us see another immutable object, this time a &lt;em&gt;tuple&lt;/em&gt; and examine how Python deals with it.&lt;/p&gt;

&lt;p&gt;Let us consider a tuple of integer objects &lt;code class=&quot;highlighter-rouge&quot;&gt;t = (1, 2, 3)&lt;/code&gt;. We see that it references memory address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1dd65ac45e8&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by t: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What happens if we try to mutate or update the tuple object above, &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;? We see that it creates a new reference to a new object (at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1dd65a514c8&lt;/code&gt;), instead of updating the earlier object. And the earlier reference would be reclaimed by the garbage collector.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/py/tup_mem_mgmt_1.png&quot; alt=&quot;Python Memory Management&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by t: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because &lt;em&gt;tuples&lt;/em&gt; are immutable objects, more like integer objects we saw in an &lt;a href=&quot;https://dotkay.github.io/2018/06/01/python-var-mem-mgmt/&quot;&gt;earlier post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, all is clear and good, right? Wait until a future post on tuples again.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="immutable" />
      
        <category term="tuples" />
      
        <category term="memory management" />
      
        <category term="Python" />
      

      

      
        <summary type="html">In an earlier post we saw how Python’s memory management behaves when dealing with immutable objects. In this post, let us see another immutable object, this time a tuple and examine how Python deals with it. Let us consider a tuple of integer objects t = (1, 2, 3). We see that it references memory address 0x1dd65ac45e8 def mem_addr(item): return hex(id(item)) t = (1, 2) print('memory referenced by t: {0}'.format(mem_addr(t))) What happens if we try to mutate or update the tuple object above, t? We see that it creates a new reference to a new object (at 0x1dd65a514c8), instead of updating the earlier object. And the earlier reference would be reclaimed by the garbage collector. t = (1, 2, 3) print('memory referenced by t: {0}'.format(mem_addr(t))) This is because tuples are immutable objects, more like integer objects we saw in an earlier post. So, all is clear and good, right? Wait until a future post on tuples again.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Python, lists and memory management →</title>
      
      <link href="https://dotkay.github.io/2018/06/12/python-lists-mem-mgmt-2/" rel="alternate" type="text/html" title="Python, lists and memory management" />
      <published>2018-06-12T00:00:00+00:00</published>
      <updated>2018-06-12T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/06/12/python-lists-mem-mgmt-2</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/06/12/python-lists-mem-mgmt-2/">&lt;p&gt;In an &lt;a href=&quot;https://dotkay.github.io/2018/06/06/python-lists-mem-mgmt/&quot;&gt;earlier post&lt;/a&gt;, we saw how lists, despite being &lt;em&gt;mutable&lt;/em&gt; objects in Python are somewhat confusing when it comes to certain operations. Let us play some more and see how they behave when we concatenate lists using &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by l1: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my execution the memory referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;l1&lt;/code&gt; seems to be &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2e70a4bc208&lt;/code&gt;. Now, as in &lt;a href=&quot;https://dotkay.github.io/2018/06/06/python-lists-mem-mgmt/&quot;&gt;our earlier example&lt;/a&gt;, let us append &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; to l1, but this time using the &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by l1: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/py/list_mem_mgmt_2.PNG&quot; alt=&quot;Python Memory Management&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now, we see that the new list object (after appending &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;) references the same memory &lt;code class=&quot;highlighter-rouge&quot;&gt;0x2e70a4bc208&lt;/code&gt; as before. So, when it comes to &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt; Python’s memory manager seems to treat lists as a real mutable object. Python developers, especially new ones, need to be careful and understand these quirks thoroughly.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="mutable" />
      
        <category term="lists" />
      
        <category term="memory management" />
      
        <category term="Python" />
      

      

      
        <summary type="html">In an earlier post, we saw how lists, despite being mutable objects in Python are somewhat confusing when it comes to certain operations. Let us play some more and see how they behave when we concatenate lists using append(). l1 = [1, 2] print (l1) print ('memory referenced by l1: {0}'.format(mem_addr(l1))) In my execution the memory referenced by l1 seems to be 0x2e70a4bc208. Now, as in our earlier example, let us append 3 to l1, but this time using the append() function. l1.append(3) print (l1) print ('memory referenced by l1: {0}'.format(mem_addr(l1))) Now, we see that the new list object (after appending 3) references the same memory 0x2e70a4bc208 as before. So, when it comes to append() Python’s memory manager seems to treat lists as a real mutable object. Python developers, especially new ones, need to be careful and understand these quirks thoroughly.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Python, mutable data-types (lists) and memory management →</title>
      
      <link href="https://dotkay.github.io/2018/06/06/python-lists-mem-mgmt/" rel="alternate" type="text/html" title="Python, mutable data-types (lists) and memory management" />
      <published>2018-06-06T00:00:00+00:00</published>
      <updated>2018-06-06T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/06/06/python-lists-mem-mgmt</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/06/06/python-lists-mem-mgmt/">&lt;p&gt;In one of our &lt;a href=&quot;https://dotkay.github.io/2018/06/01/python-var-mem-mgmt/&quot;&gt;previous posts&lt;/a&gt; we saw how Python’s memory management handles immutable variables in a program. Lists in Python are mutable. Let’s see how it works out.&lt;/p&gt;

&lt;p&gt;Let us consider a list &lt;code class=&quot;highlighter-rouge&quot;&gt;l1&lt;/code&gt; that contains &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2]&lt;/code&gt; and see what memory address it references.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by l1: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my execution, it seems to reference the memory address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1d49c799e48&lt;/code&gt;. Now, let us concatenate a list containing a single element &lt;code class=&quot;highlighter-rouge&quot;&gt;[3]&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;l1&lt;/code&gt;. Since lists are mutable, shouldn’t we expect the new list created out of concatenation to reference the same memory location? Let’s check it out.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by l1: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/py/list_mem_mgmt_1.PNG&quot; alt=&quot;Python Memory Management&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We see that it references a new memory location (in my case &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1d49c79bc08&lt;/code&gt;) different from the earlier one. What is happening? Aren’t lists &lt;em&gt;mutable&lt;/em&gt; objects? Let us see in future posts when the memory manager would reference newly created lists to the same memory location as the initial list. Till then, play around with Python and discover more quirks.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="mutable" />
      
        <category term="memory management" />
      
        <category term="Python" />
      

      

      
        <summary type="html">In one of our previous posts we saw how Python’s memory management handles immutable variables in a program. Lists in Python are mutable. Let’s see how it works out. Let us consider a list l1 that contains [1, 2] and see what memory address it references. def mem_addr(item): return hex(id(item)) l1 = [1, 2] print (l1) print ('memory referenced by l1: {0}'.format(mem_addr(l1))) In my execution, it seems to reference the memory address 0x1d49c799e48. Now, let us concatenate a list containing a single element [3] to l1. Since lists are mutable, shouldn’t we expect the new list created out of concatenation to reference the same memory location? Let’s check it out. l1 = l1 + [3] print (l1) print ('memory referenced by l1: {0}'.format(mem_addr(l1))) We see that it references a new memory location (in my case 0x1d49c79bc08) different from the earlier one. What is happening? Aren’t lists mutable objects? Let us see in future posts when the memory manager would reference newly created lists to the same memory location as the initial list. Till then, play around with Python and discover more quirks.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Python, immutable data-types and memory management →</title>
      
      <link href="https://dotkay.github.io/2018/06/01/python-var-mem-mgmt/" rel="alternate" type="text/html" title="Python, immutable data-types and memory management" />
      <published>2018-06-01T00:00:00+00:00</published>
      <updated>2018-06-01T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/06/01/python-var-mem-mgmt</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/06/01/python-var-mem-mgmt/">&lt;p&gt;I recently started coding in Python as I was playing around with data science, statistics and machine learning libraries. As I started writing more and more Python (Python 3) code, I also started exploring how different it is from C/C++. Although I am very familiar with programming languages like OCaml, Python is giving me more surprising discoveries than in any other languages I have played with. Let us look at some of those together.&lt;/p&gt;

&lt;p&gt;First is how Python’s memory management handles immutable and mutable data-types. For beginners, in Python everything is an object. Something declared like&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;results in an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; object &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; that references a memory location. The memory location referenced by the object can be determined by using &lt;code class=&quot;highlighter-rouge&quot;&gt;id()&lt;/code&gt; function and by convention you denote it in Hexadecimal number, so one often does &lt;code class=&quot;highlighter-rouge&quot;&gt;hex(id(a))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let us see what is the memory referenced by our variable (actually a Python object) &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by a: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/py/var_mem_mgmt_2.PNG&quot; alt=&quot;Python Memory Management&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;and it returns &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffd06a5a2b0&lt;/code&gt;. Now, let us reassign &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; to value &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt;. Now, we see that memory referenced has changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffd06a5a3f0&lt;/code&gt;, instead of changing the value in the location referenced earlier.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'memory referenced by a: {0}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;img_container&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/images/py/var_mem_mgmt_1.PNG&quot; alt=&quot;Python Memory Management&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In programming languages like C or Java, the contents in the memory would be changed. However, in Python a new reference is created to a memory location containing the (updated) value &lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt;. Now our previous int object is not referencing anything and Python’s garbage collector would reclaim it.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="immutable" />
      
        <category term="memory management" />
      
        <category term="Python" />
      

      

      
        <summary type="html">I recently started coding in Python as I was playing around with data science, statistics and machine learning libraries. As I started writing more and more Python (Python 3) code, I also started exploring how different it is from C/C++. Although I am very familiar with programming languages like OCaml, Python is giving me more surprising discoveries than in any other languages I have played with. Let us look at some of those together. First is how Python’s memory management handles immutable and mutable data-types. For beginners, in Python everything is an object. Something declared like a = 10 results in an int object a that references a memory location. The memory location referenced by the object can be determined by using id() function and by convention you denote it in Hexadecimal number, so one often does hex(id(a)). Now, let us see what is the memory referenced by our variable (actually a Python object) a. print('memory referenced by a: {0}'.format(hex(id(a)))) and it returns 0x7ffd06a5a2b0. Now, let us reassign a to value 20. Now, we see that memory referenced has changed to 0x7ffd06a5a3f0, instead of changing the value in the location referenced earlier. a = 20 print('memory referenced by a: {0}'.format(hex(id(a)))) In programming languages like C or Java, the contents in the memory would be changed. However, in Python a new reference is created to a memory location containing the (updated) value 20. Now our previous int object is not referencing anything and Python’s garbage collector would reclaim it.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Do you have some change? →</title>
      
      <link href="https://dotkay.github.io/2018/05/07/coin-change-rec/" rel="alternate" type="text/html" title="Do you have some change?" />
      <published>2018-05-07T00:00:00+00:00</published>
      <updated>2018-05-07T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/05/07/coin-change-rec</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/05/07/coin-change-rec/">&lt;p&gt;In a &lt;a href=&quot;https://dotkay.github.io/2018/05/05/climbing-stairs-recursively&quot;&gt;previous post&lt;/a&gt;, we saw a recursive algorithm for computing the number of ways to reach atop &lt;em&gt;n&lt;/em&gt; stairs. Let’s do a similar computation, this time for computing the number of ways you can combine coin denominations to arrive at a given amount. More precisely:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a set of coin denominations and a target amount, how many ways can you combine the denominations in such a way that the combination sums up to the target amount? You can assume that you have unlimited supply of denominations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if you have unlimited supply of $1 and $2 currency bills, how many ways can you combine them to return a change for $3? You could give three $1 bills, or a $1 bill along with a $2 bill (or alternately, a $2 bill along with a $1 bill, which is just a duplicate of the previous case just that I kept the $2 bill upon the $1 bill while giving).&lt;/p&gt;

&lt;p&gt;Let us think recursively. Given a set S = { $1, $2 } of bills, we could pick a $1 bill (to give) and now we have to think how many ways you can pick bills from our set S for the remaining amount of $2 ($3 the target amount - $1, the bill we already picked). Now, if you choose to pick another $1 bill, you have to think how many ways you can pick bills from our set S for the remaining amount of $1 ($3 the target amount - our first picked $1 - our second $1 pick). Now, we cannot pick $2 as we need only $1 and are just left with one choice - to pick another $1 from the set. This gives us one solution { $1, $1, $1 }.&lt;/p&gt;

&lt;p&gt;Alternately, we could have first picked a $2 bill and then we would be left with no choice but to pick another $1, so that it adds up to $3. What we are essentially doing is picking a bill whose value is less than the target amount and then computing the number of ways you can pick bills for the remaining amount, i.e. target amount - picked bill amount (our recursive step). And if this difference becomes 0, then we have a solution that sums up to the target amount (our base case for recursion).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coin_ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// base case&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin_ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;If you try the above implementation on our example with S = { 1, 2 } and target = 3, you will get &lt;em&gt;ways&lt;/em&gt; to be 3. And the three ways are { 1, 1, 1 }, { 1, 2 } and { 2, 1 }. What if we want only the unique ways? How would you go about modifying the above algorithm? That is we want to collapse { 1, 2 } and { 2, 1 } as just one count - after all it does not matter if I keep the $1 bill upon $2 bill or the other way around as long as I am returning bills that sum up to $3. Think about it.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="algorithms" />
      
        <category term="recursion" />
      
        <category term="C++" />
      

      

      
        <summary type="html">In a previous post, we saw a recursive algorithm for computing the number of ways to reach atop n stairs. Let’s do a similar computation, this time for computing the number of ways you can combine coin denominations to arrive at a given amount. More precisely: Given a set of coin denominations and a target amount, how many ways can you combine the denominations in such a way that the combination sums up to the target amount? You can assume that you have unlimited supply of denominations. For example, if you have unlimited supply of $1 and $2 currency bills, how many ways can you combine them to return a change for $3? You could give three $1 bills, or a $1 bill along with a $2 bill (or alternately, a $2 bill along with a $1 bill, which is just a duplicate of the previous case just that I kept the $2 bill upon the $1 bill while giving). Let us think recursively. Given a set S = { $1, $2 } of bills, we could pick a $1 bill (to give) and now we have to think how many ways you can pick bills from our set S for the remaining amount of $2 ($3 the target amount - $1, the bill we already picked). Now, if you choose to pick another $1 bill, you have to think how many ways you can pick bills from our set S for the remaining amount of $1 ($3 the target amount - our first picked $1 - our second $1 pick). Now, we cannot pick $2 as we need only $1 and are just left with one choice - to pick another $1 from the set. This gives us one solution { $1, $1, $1 }. Alternately, we could have first picked a $2 bill and then we would be left with no choice but to pick another $1, so that it adds up to $3. What we are essentially doing is picking a bill whose value is less than the target amount and then computing the number of ways you can pick bills for the remaining amount, i.e. target amount - picked bill amount (our recursive step). And if this difference becomes 0, then we have a solution that sums up to the target amount (our base case for recursion). int coin_ways(std::vector&amp;lt;int&amp;gt;&amp;amp; S, int n, int target) { // base case if (target &amp;lt; 0) return 0; if (target == 0) return 1; int ways = 0; for (int i = 0; i &amp;lt; n; i++) { ways += coin_ways(S, n, target - S[i]); } return ways; } If you try the above implementation on our example with S = { 1, 2 } and target = 3, you will get ways to be 3. And the three ways are { 1, 1, 1 }, { 1, 2 } and { 2, 1 }. What if we want only the unique ways? How would you go about modifying the above algorithm? That is we want to collapse { 1, 2 } and { 2, 1 } as just one count - after all it does not matter if I keep the $1 bill upon $2 bill or the other way around as long as I am returning bills that sum up to $3. Think about it.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Climbing stairs and remembering the past… →</title>
      
      <link href="https://dotkay.github.io/2018/05/06/climbing-stairs-dp/" rel="alternate" type="text/html" title="Climbing stairs and remembering the past..." />
      <published>2018-05-06T00:00:00+00:00</published>
      <updated>2018-05-06T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/05/06/climbing-stairs-dp</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/05/06/climbing-stairs-dp/">&lt;blockquote&gt;
  &lt;p&gt;Those who cannot remember the past are condemned to repeat it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our &lt;a href=&quot;https://dotkay.github.io/2018/05/05/climbing-stairs-recursively&quot;&gt;previous post&lt;/a&gt; we saw a recursive algorithm to compute the number of ways one can climb a fleet of &lt;em&gt;n&lt;/em&gt; steps. If you draw the recursion tree for such an algorithm, we would soon find that we are computing some of the sub-problems repeatedly. We can do better by remembering (i.e. storing in some data structure) what we computed so that we can retrieve it and reuse it when needed again. Or in other fancy computer science parlance, we can use &lt;em&gt;dynamic programming&lt;/em&gt; technique to solve such recursive problems more efficiently.&lt;/p&gt;

&lt;p&gt;Here is the recursion tree for a hypothetical problem, similar to climbing stairs from our &lt;a href=&quot;https://dotkay.github.io/2018/05/05/climbing-stairs-recursively&quot;&gt;previous post&lt;/a&gt; where each function call for an input parameter value &lt;em&gt;n&lt;/em&gt; leads to two calls for values &lt;em&gt;n-1&lt;/em&gt; and &lt;em&gt;n-2&lt;/em&gt;. We can readily see, even in this very small example, that the all the function calls in the sub-tree rooted at &lt;em&gt;2&lt;/em&gt; is computed again unnecessarily. One of the main ideas in dynamic programming is to store such computations so that we can reuse them when needed again.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/algorithms/cpp/rec_tree.jpg&quot; alt=&quot;recursion tree&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us try to use dynamic programming and rewrite our algorithm for computing the number of ways of climbing &lt;em&gt;n&lt;/em&gt; steps. We shall use a simple array (a C++ vector) to store intermediate computations. More concretely, we will store the number of ways of climbing 1 step, the number of ways of climbing 2 steps, and so on. So, our array &lt;code class=&quot;highlighter-rouge&quot;&gt;ways&lt;/code&gt; stores the number of ways - &lt;code class=&quot;highlighter-rouge&quot;&gt;ways[i]&lt;/code&gt; gives us the number of ways of climbing &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; steps. As we saw in our previous post, the algorithm just needs to compute &lt;code class=&quot;highlighter-rouge&quot;&gt;ways[i-1] + ways[i-2]&lt;/code&gt; for different values of &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; upto &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; and finally return &lt;code class=&quot;highlighter-rouge&quot;&gt;ways[n]&lt;/code&gt; as the result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// base case&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ways&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;An astute reader would start thinking how this is different from divide-and-conquer approaches for solving recursive problems. I will let you think about it for now and find out for yourself what  technique is beneficial for what specific structure of the recursive problem - that was already a hint there!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="algorithms" />
      
        <category term="dynamic programming" />
      
        <category term="C++" />
      

      

      
        <summary type="html">Those who cannot remember the past are condemned to repeat it! In our previous post we saw a recursive algorithm to compute the number of ways one can climb a fleet of n steps. If you draw the recursion tree for such an algorithm, we would soon find that we are computing some of the sub-problems repeatedly. We can do better by remembering (i.e. storing in some data structure) what we computed so that we can retrieve it and reuse it when needed again. Or in other fancy computer science parlance, we can use dynamic programming technique to solve such recursive problems more efficiently. Here is the recursion tree for a hypothetical problem, similar to climbing stairs from our previous post where each function call for an input parameter value n leads to two calls for values n-1 and n-2. We can readily see, even in this very small example, that the all the function calls in the sub-tree rooted at 2 is computed again unnecessarily. One of the main ideas in dynamic programming is to store such computations so that we can reuse them when needed again. Let us try to use dynamic programming and rewrite our algorithm for computing the number of ways of climbing n steps. We shall use a simple array (a C++ vector) to store intermediate computations. More concretely, we will store the number of ways of climbing 1 step, the number of ways of climbing 2 steps, and so on. So, our array ways stores the number of ways - ways[i] gives us the number of ways of climbing i steps. As we saw in our previous post, the algorithm just needs to compute ways[i-1] + ways[i-2] for different values of i upto n and finally return ways[n] as the result. int stairs(int n) { std::vector&amp;lt;int&amp;gt; ways(n+1); // base case if (n &amp;lt;= 1) return 1; ways[0] = 1; ways[1] = 1; for (int i = 2; i &amp;lt;= n; i++) ways[i] = ways[i-1] + ways[i-2]; return ways[n]; } An astute reader would start thinking how this is different from divide-and-conquer approaches for solving recursive problems. I will let you think about it for now and find out for yourself what technique is beneficial for what specific structure of the recursive problem - that was already a hint there!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Climbing stairs recursively →</title>
      
      <link href="https://dotkay.github.io/2018/05/05/climbing-stairs-recursively/" rel="alternate" type="text/html" title="Climbing stairs recursively" />
      <published>2018-05-05T00:00:00+00:00</published>
      <updated>2018-05-05T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/05/05/climbing-stairs-recursively</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/05/05/climbing-stairs-recursively/">&lt;blockquote&gt;
  &lt;p&gt;How many different ways can you reach atop a fleet of &lt;em&gt;n&lt;/em&gt; step stairs taking one or two step jumps at a time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This question might ring a bell for some who have heard about an Italian mathematician who computed a similar sequence for counting rabbits in his garden. Let us think about it using a smaller example and generalize the solution. Let us say we have only 2 steps to climb. Given the constraints (1 step or 2 step climbs only), we can complete 2 steps in the following ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;1 step, 1 step&lt;/li&gt;
  &lt;li&gt;2 steps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2 possible ways. How about 3 steps?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;1 step, 1 step, 1 step&lt;/li&gt;
  &lt;li&gt;1 step, 2 steps&lt;/li&gt;
  &lt;li&gt;2 steps, 1 step&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/algorithms/cpp/three_steps.jpg&quot; alt=&quot;3 steps&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, 3 possible ways. What about if we have an additional one to climb (i.e. total of 4 steps to climb)? We can do it in the following ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;1 step, 1 step, 1 step, 1 step&lt;/li&gt;
  &lt;li&gt;1 step, 2 steps, 1 step&lt;/li&gt;
  &lt;li&gt;1 step, 1 step, 2 steps&lt;/li&gt;
  &lt;li&gt;2 steps, 1 step, 1 step&lt;/li&gt;
  &lt;li&gt;2 steps, 2 steps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/algorithms/cpp/four_steps.jpg&quot; alt=&quot;4 steps&quot; class=&quot;img=responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also notice that the number of ways of climbing 4 steps is the number of ways of climbing 2 steps + the number of ways we could climb 3 steps. Recursively, we could compute for any &lt;em&gt;n&lt;/em&gt; steps, given the constraints, we could climb it by computing the number of ways of climbing &lt;em&gt;n-1&lt;/em&gt; and &lt;em&gt;n-2&lt;/em&gt; steps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// base cases&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;</content>

      
      
      
      
      

      

      
        <category term="algorithms" />
      
        <category term="recursion" />
      
        <category term="C++" />
      

      

      
        <summary type="html">How many different ways can you reach atop a fleet of n step stairs taking one or two step jumps at a time? This question might ring a bell for some who have heard about an Italian mathematician who computed a similar sequence for counting rabbits in his garden. Let us think about it using a smaller example and generalize the solution. Let us say we have only 2 steps to climb. Given the constraints (1 step or 2 step climbs only), we can complete 2 steps in the following ways: 1 step, 1 step 2 steps 2 possible ways. How about 3 steps? 1 step, 1 step, 1 step 1 step, 2 steps 2 steps, 1 step So, 3 possible ways. What about if we have an additional one to climb (i.e. total of 4 steps to climb)? We can do it in the following ways: 1 step, 1 step, 1 step, 1 step 1 step, 2 steps, 1 step 1 step, 1 step, 2 steps 2 steps, 1 step, 1 step 2 steps, 2 steps We also notice that the number of ways of climbing 4 steps is the number of ways of climbing 2 steps + the number of ways we could climb 3 steps. Recursively, we could compute for any n steps, given the constraints, we could climb it by computing the number of ways of climbing n-1 and n-2 steps. int stairs(int n) { // base cases if (n &amp;lt;= 2) return n; int res = stairs(n-1) + stairs(n-2); return res; }</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">More efficient computation of equillibrium index in an array →</title>
      
      <link href="https://dotkay.github.io/2018/04/23/arr-equillibrium/" rel="alternate" type="text/html" title="More efficient computation of equillibrium index in an array" />
      <published>2018-04-23T00:00:00+00:00</published>
      <updated>2018-04-23T00:00:00+00:00</updated>
      <id>https://dotkay.github.io/2018/04/23/arr-equillibrium</id>
      <content type="html" xml:base="https://dotkay.github.io/2018/04/23/arr-equillibrium/">&lt;p&gt;In an &lt;a href=&quot;https://dotkay.github.io/2018/04/20/arr-equillibrium-naive&quot;&gt;earlier post&lt;/a&gt;, we saw how to compute the equillibrium index of an array. But it was a very ordinary implementation - &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt;. We could do much better with some auxiliary space spent, i.e. we maintain an auxiliary array to keep a running sum of the elements to the left as we traverse the array.&lt;/p&gt;

&lt;p&gt;Here is the idea. We would create an auxiliary array of the same size as the input array. As we traverse the input array from left to right, we compute the &lt;em&gt;prefix sum&lt;/em&gt; of the elements in the array and store it in this auxiliary array (&lt;code class=&quot;highlighter-rouge&quot;&gt;left_sum&lt;/code&gt; in the code fragment below). Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;left sum&lt;/code&gt; can be used to query, for example, the sum of elements to the left of any index &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; as we traverse the array.&lt;/p&gt;

&lt;p&gt;We now traverse the input array, this time from right to left, and keep a running sum of the elements in a single variable (&lt;code class=&quot;highlighter-rouge&quot;&gt;right_sum&lt;/code&gt; in code fragment below). As we traverse, we check for a match in the auxiliary array we had built earlier for the left sum, and if there is a match we have found an equillibrium point. Since we do array traversal only twice, this becomes an &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; solution with &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; auxiliary space for storing the prefix sums.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eq_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// compute the left sum&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;left_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// traverse input array from the right,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// computing right_sum and matching it with&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// left sum (i.e. looking for equillibrium)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;equillibrium found at index: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;right_sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;Power of prefix sums!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="algorithms" />
      
        <category term="data structures" />
      
        <category term="arrays" />
      

      

      
        <summary type="html">In an earlier post, we saw how to compute the equillibrium index of an array. But it was a very ordinary implementation - O(n^2). We could do much better with some auxiliary space spent, i.e. we maintain an auxiliary array to keep a running sum of the elements to the left as we traverse the array. Here is the idea. We would create an auxiliary array of the same size as the input array. As we traverse the input array from left to right, we compute the prefix sum of the elements in the array and store it in this auxiliary array (left_sum in the code fragment below). Now, left sum can be used to query, for example, the sum of elements to the left of any index i as we traverse the array. We now traverse the input array, this time from right to left, and keep a running sum of the elements in a single variable (right_sum in code fragment below). As we traverse, we check for a match in the auxiliary array we had built earlier for the left sum, and if there is a match we have found an equillibrium point. Since we do array traversal only twice, this becomes an O(n) solution with O(n) auxiliary space for storing the prefix sums. void eq_index(int arr[], int n) { // compute the left sum int* left_sum = new int[n]; left_sum[0] = arr[0]; for (int i = 1; i &amp;lt; n; i++) left_sum[i] = left_sum[i-1] + arr[i-1]; // traverse input array from the right, // computing right_sum and matching it with // left sum (i.e. looking for equillibrium) int right_sum = 0; for (int i = n-1; i &amp;gt;= 0; i--) { if (right_sum == left_sum[i]) std::cout &amp;lt;&amp;lt; &quot;equillibrium found at index: &quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl; right_sum += arr[i]; } } Power of prefix sums!</summary>
      

      
      
    </entry>
  
  
</feed>
